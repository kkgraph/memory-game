{"version":3,"sources":["components/Nav/Nav.js","components/Footer/Footer.js","components/Jumbo/Jumbo.js","components/Card/Card.js","components/Grid/Grid.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Nav","message","score","topScore","className","href","Footer","props","alt","src","Jumbo","Card","id","onClick","handleImageClick","image","Grid","shake","children","Game","state","dogs","goal","handleClick","doubleClicked","update","forEach","dog","clicked","sort","Math","random","setState","this","map","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gmCAwBeA,MArBf,YAA4C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC3B,OACE,yBAAKC,UAAU,qDACb,wBAAIA,UAAU,4DACZ,wBAAIA,UAAU,kEACZ,uBAAGA,UAAU,qCAAqCC,KAAK,KACrD,iDAGJ,wBACED,UAAU,iEAEV,4BAAKH,IAEP,wBAAIG,UAAU,sCACZ,wCAAcF,EAAd,kBAAoCC,OCRjCG,G,MAPA,SAAAC,GAAK,OAEhB,yBAAKH,UAAU,6BAAf,gBACiB,yBAAKI,IAAI,QAAQC,IAAI,4BADtC,eAC8E,uBAAGJ,KAAK,4BAAR,iBCKnEK,G,MARD,SAAAH,GAAK,OACf,yBAAKH,UAAU,aACX,wBAAIA,UAAU,aAAd,gBACA,2GCGOO,G,MANF,SAAAJ,GAAK,OACd,yBAAKH,UAAU,OAAOQ,GAAIL,EAAMK,GAAIC,QAASN,EAAMO,kBAC/C,yBAAKV,UAAU,WAAWK,IAAKF,EAAMQ,MAAOP,IAAI,iBCKzCQ,G,MAPF,SAAAT,GAAK,OACd,yBAAKH,UAAS,oBAAeG,EAAMU,MAAQ,UAAY,KAClDV,EAAMW,Y,OCwEAC,E,2MAlEXC,MAAQ,CACJC,OACAnB,MAAO,EACPC,SAAU,EACVmB,KAAM,GACNrB,QAAS,sB,EAGbsB,YAAc,SAAAX,GACV,IAAIY,GAAgB,EAChBC,EAAS,CACTJ,KAAK,YAAK,EAAKD,MAAMC,MACrBnB,MAAO,EAAKkB,MAAMlB,MAClBC,SAAU,EAAKiB,MAAMjB,UAGzBsB,EAAOJ,KAAKK,SAAQ,SAAAC,GAEZA,EAAIf,KAAOA,IACPe,EAAIC,UACJJ,GAAgB,GAGpBG,EAAIC,SAAU,EACdH,EAAOvB,QACHuB,EAAOvB,MAAQuB,EAAOtB,WACtBsB,EAAOtB,SAAWsB,EAAOvB,WAMjCsB,IACAC,EAAOJ,KAAKK,SACR,SAAAC,GAAG,OAAIN,EAAKO,SAAU,KAE1BH,EAAOvB,MAAQ,GAInBuB,EAAOJ,KAAOI,EAAOJ,KAAKQ,MAAK,iBAAM,GAAMC,KAAKC,YAEhD,EAAKC,SAAS,CAAEX,KAAMI,EAAOJ,KAAMnB,MAAOuB,EAAOvB,MAAOC,SAAUsB,EAAOtB,Y,wEAGnE,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CACIF,QAASgC,KAAKb,MAAMnB,QACpBC,MAAO+B,KAAKb,MAAMlB,MAClBC,SAAU8B,KAAKb,MAAMjB,WACzB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMc,OAAQgB,KAAKb,MAAMlB,OAAS+B,KAAKb,MAAMjB,UACxC8B,KAAKb,MAAMC,KAAKa,KACb,SAAAP,GAAG,OACC,kBAAC,EAAD,CAAMb,iBAAkB,kBAAM,EAAKS,YAAYI,EAAIf,KAAKuB,IAAKR,EAAIf,GAAIA,GAAIe,EAAIf,GAAIG,MAAOY,EAAIZ,YAIxG,kBAAC,EAAD,W,GA7DGqB,aCJJC,EAFH,kBAAM,kBAAC,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4be6177c.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css';\n\nfunction Nav({ message, score, topScore }) {\n    return (\n      <nav className=\"navbar sticky-top navbar-dark bg-info p-0 tp-text\">\n        <ul className=\"row center list-inline m-0 nav-fill nav-height nav-width\">\n          <li className=\"col list-inline-item my-auto nav-calc-font p-0 m-0 text-center\">\n            <a className=\"nav-calc-font navbar-brand p-3 m-0\" href=\"/\">\n              <h1>Dog Memory Game</h1>\n            </a>\n          </li>\n          <li\n            className=\"col list-inline-item my-auto m-10 p-10 text-center text-light\"\n          >\n            <h2>{message}</h2>\n          </li>\n          <li className=\"nav-calc-font navbar-brand p-3 m-0\">\n            <h2> Points: {score} | Top Points: {topScore}</h2>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\nexport default Nav;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = props => (\n\n    <div className=\"bottom bg-info text-white\">\n        Clicky Game! <img alt=\"react\" src=\"assets/images/react.svg\" /> created by <a href=\"http://kkgraph.github.io\">Kim Graff </ a>\n    </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport './Jumbo.css';\n\nconst Jumbo = props => (\n    <div className=\"jumbotron\">\n        <h1 className=\"display-3\">Clicky Game!</h1>\n        <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n    </div>\n\n);\n\nexport default Jumbo;\n","import React from 'react';\nimport './Card.css';\n\nconst Card = props => (\n    <div className=\"card\" id={props.id} onClick={props.handleImageClick}>\n        <img className=\"card-img\" src={props.image} alt=\"dog image\" />\n    </div>\n);\n\nexport default Card;\n","import React from 'react';\nimport './Grid.css';\n\nconst Grid = props => (\n    <div className={`container ${props.shake ? \" shake \" : \"\"}`} >\n        {props.children}\n    </div>\n\n);\n\nexport default Grid;\n","import React, { Component } from 'react';\nimport './Game.css';\nimport Nav from '../Nav';\nimport Footer from '../Footer';\nimport Jumbo from '../Jumbo';\nimport Card from '../Card';\nimport Grid from '../Grid';\nimport dogs from '../dogs.json';\n\n\nclass Game extends Component {\n    state = {\n        dogs,\n        score: 0,\n        topScore: 0,\n        goal: 12,\n        message: \"How's your memory?\"\n    };\n\n    handleClick = id => {\n        let doubleClicked = false;\n        let update = {\n            dogs: [...this.state.dogs],\n            score: this.state.score,\n            topScore: this.state.topScore\n        };\n\n        update.dogs.forEach(dog => {\n            //stopped here started the if function to id if you double clikced the dog image\n            if (dog.id === id) {\n                if (dog.clicked) {\n                    doubleClicked = true;\n                };\n                //updating the scores\n                dog.clicked = true;\n                update.score++;\n                if (update.score > update.topScore) {\n                    update.topScore = update.score;\n                };\n            };\n        });\n\n        //resetting game\n        if (doubleClicked) {\n            update.dogs.forEach(\n                dog => dogs.clicked = false\n            )\n            update.score = 0;\n        };\n\n        //randomize\n        update.dogs = update.dogs.sort(() => 0.5 - Math.random());\n\n        this.setState({ dogs: update.dogs, score: update.score, topScore: update.topScore });\n    };\n\n    render() {\n        return (\n            <div>\n                <Nav\n                    message={this.state.message}\n                    score={this.state.score}\n                    topScore={this.state.topScore} />\n                <Jumbo />\n                <Grid shake={!this.state.score && this.state.topScore}>\n                    {this.state.dogs.map(\n                        dog => (\n                            <Card handleImageClick={() => this.handleClick(dog.id)} key={dog.id} id={dog.id} image={dog.image} />\n                        )\n                    )}\n                </Grid>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nconst App = () => <Game />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}